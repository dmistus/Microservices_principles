# "Микросервисы: принципы"

## Вы работаете в крупной компании, которая строит систему на основе микросервисной архитектуры. Вам как DevOps-специалисту необходимо выдвинуть предложение по организации инфраструктуры для разработки и эксплуатации.

### Задача 1: API Gateway

*Предложите решение для обеспечения реализации API Gateway. Составьте сравнительную таблицу возможностей различных программных решений. На основе таблицы сделайте выбор решения.*

*Решение должно соответствовать следующим требованиям:*

*маршрутизация запросов к нужному сервису на основе конфигурации,*

*возможность проверки аутентификационной информации в запросах,*

*обеспечение терминации HTTPS.*

#### *Обоснуйте свой выбор.*

На рынке сейчас присутствует большой выбор различных программных решений для организации API Gateway, сравнительные характеристики некоторых (не всех) я вывел в следующую таблицу:

 **Продукт**         | **Маршрутизация запросов** | **Проверка аутентификации** | **Обеспечение терминации HTTPS** 
---------------------|----------------------------|-----------------------------|----------------------------------
 **Kong**            | Да                         | Да                          | Да                               
 **Nginx**           | Да                         | Да                          | Да                               
 **Tyk**             | Да                         | Да                          | Да                               
 **AWS API Gateway** | Да                         | Да                          | Да                               
 **Azure Gateway**   | Да                         | Да                          | Да                               
 **Ambassador**      | Да                         | Да                          | Да                               


Видно, что возможности у всех решений практически одинаковые. Однозначного выбора сервиса для обеспечения реализации API Gateway нет. 
В общем случае я бы выбрал Nginx.

### Задача 2: Брокер сообщений

 *Составьте таблицу возможностей различных брокеров сообщений. На основе таблицы сделайте обоснованный выбор решения.*

*Решение должно соответствовать следующим требованиям:*

*поддержка кластеризации для обеспечения надёжности,*

*хранение сообщений на диске в процессе доставки,*

*высокая скорость работы,*

*поддержка различных форматов сообщений,*

*разделение прав доступа к различным потокам сообщений,*

*простота эксплуатации.*

#### *Обоснуйте свой выбор.*

| Параметр | RabbitMQ | Apache Kafka | ActiveMQ | NATS | Redis |
|:---------|:--------:|:------------:|:--------:|:----:|:-----:|
| Поддержка кластеризации для обеспечения надежности | + | + | + | + | + |
| Хранение сообщений на диске в процессе доставки | + | + | + | + | + |
| Высокая скорость работы | + - | + | - | + | + |
| Поддержка различных форматов сообщений | AMQP, MQTT, STOMP | Только binary через TCP Socket | 10 форматов, включая AMQP, AUTO, MQTT, REST | Только NATS Streaming Protocol | Только RESP |
| Разделение прав доступа к различным потокам сообщений | + | + | + | + | + |
| Простота эксплуатации | + | - | + | + | + |


Из поставленной задачи в начале не очень понятен характер нагрузки:

- Видно что компания большая, но сопоставимо ли это с объёмом сообщений, которые будут литься на брокера?
- Хватит ли RabbitMQ, потому что он популярный и его просто настроить, или лучше озадачиться чем-то помощней, вроде Apache Kafka?
- Действительно важна "всеядность" или это требование включили "про запас" с запасом на будущее?
- Очередь сообщений нужна только для связи микросервисов, или планируется подключать какие-то внешние системы и монолитные системы?

Как универсальное решение, возможно использовать RabbitMQ - он усреднённый по всем параметрам, очень распространён, проще найти специалистов, которые с ним работали.





